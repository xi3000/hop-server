--// CONFIG
local WEBHOOK_URL = "https://discord.com/api/webhooks/1401785416104939720/6LU4HbxLm8mwoS8iZ0LrbwBmZ1Wp6clskoXsEGtnymrKNLVDTeVPZbpeBKKom9wrWG6Z" -- Thay b·∫±ng webhook c·ªßa b·∫°n
local HOP_DELAY = 20 -- Delay hop server (gi√¢y)

--// SERVICES
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

--// VARIABLES
local autoHop = false
local hopCount = 0

--// SEND WEBHOOK
local function sendWebhook(success, jobId)
    hopCount += 1
    local data = {
        ["username"] = "AutoHop Logger",
        ["embeds"] = {{
            ["title"] = "üåç AutoHop Log",
            ["color"] = success and 0x00ff00 or 0xff0000,
            ["fields"] = {
                {["name"] = "üë§ Username", ["value"] = LocalPlayer.Name, ["inline"] = true},
                {["name"] = "‚úÖ Hop", ["value"] = success and "true" or "false", ["inline"] = true},
                {["name"] = "üÜî JobId", ["value"] = jobId or "nil", ["inline"] = false},
                {["name"] = "üîÅ Hop Count", ["value"] = tostring(hopCount), ["inline"] = true},
            },
            ["footer"] = {["text"] = "AutoHop Script Logger"}
        }}
    }

    local jsonData = HttpService:JSONEncode(data)

    pcall(function()
        if request then
            request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = jsonData
            })
        else
            warn("‚ùå KRNL kh√¥ng h·ªó tr·ª£ request ‚Üí kh√¥ng g·ª≠i ƒë∆∞·ª£c webhook")
        end
    end)
end

--// FETCH SERVER LIST
local function fetchServers()
    local success, result = pcall(function()
        return HttpService:GetAsync("https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?sortOrder=Desc&limit=100")
    end)
    if success then
        local data = HttpService:JSONDecode(result)
        if data and data.data then
            return data.data
        end
    end
    return nil
end

--// AUTO HOP
local function autoHopServer()
    while autoHop do
        task.wait(HOP_DELAY)

        local servers = fetchServers()
        local hopped = false

        if servers then
            for _, server in ipairs(servers) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    local success, err = pcall(function()
                        sendWebhook(true, server.id)
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, LocalPlayer)
                    end)

                    if not success then
                        warn("‚ùå Hop server th·∫•t b·∫°i: " .. tostring(err))
                        sendWebhook(false, server.id)
                    end

                    hopped = true
                    break
                end
            end
        end

        if not hopped then
            warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y server h·ª£p l·ªá, retry sau "..HOP_DELAY.." gi√¢y")
            sendWebhook(false, nil)
        end
    end
end

--// GUI
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
local ToggleButton = Instance.new("TextButton", ScreenGui)
ToggleButton.Size = UDim2.new(0, 150, 0, 50)
ToggleButton.Position = UDim2.new(0.5, -75, 0.1, 0)
ToggleButton.Text = "üî¥ AutoHop: OFF"
ToggleButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.TextSize = 20
ToggleButton.BorderSizePixel = 0
ToggleButton.Active = true
ToggleButton.Draggable = true

ToggleButton.MouseButton1Click:Connect(function()
    autoHop = not autoHop
    if autoHop then
        ToggleButton.Text = "üü¢ AutoHop: ON"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        task.spawn(autoHopServer)
    else
        ToggleButton.Text = "üî¥ AutoHop: OFF"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    end
end)
